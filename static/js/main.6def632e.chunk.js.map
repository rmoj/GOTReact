{"version":3,"sources":["components/Tile/Tile.js","components/Title/Title.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","Title","class","Wrapper","children","App","state","pics","selectedPics","message","score","total","_this","includes","console","log","setState","Object","toConsumableArray","concat","shuffleArray","array","i","length","j","Math","floor","random","_ref","_this2","this","components_Wrapper_Wrapper","components_Title_Title","map","pic","components_Tile_Tile","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kvCAWeA,SARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCMxBC,SATD,SAAAZ,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKU,MAAM,yBACTZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,aAAV,yBACAZ,EAAAC,EAAAC,cAAA,yFCDWW,SAFC,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMe,mBC2E1CC,oNArEbC,MAAQ,CACNC,KAAMA,EACNC,aAAc,GACdC,QAAS,GACTC,MAAO,EACPC,MAAO,KAGThB,YAAc,SAAAC,GACRgB,EAAKN,MAAME,aAAaK,SAASjB,IAEnCkB,QAAQC,IAAI,aACZH,EAAKI,SAAS,CACZR,aAAc,GACdC,QAAS,oDACTC,MAAO,EACPC,MAAQC,EAAKN,MAAMI,MAAQE,EAAKN,MAAMK,MAASC,EAAKN,MAAMI,MAAQE,EAAKN,MAAMK,SAGjD,KAArBC,EAAKN,MAAMI,MAEpBE,EAAKI,SAAS,CACZR,aAAc,GACdC,QAAS,0DACTC,MAAOE,EAAKN,MAAMI,MAAQ,EAC1BC,MAAQC,EAAKN,MAAMI,MAAQ,EAAIE,EAAKN,MAAMK,MAASC,EAAKN,MAAMI,MAAQ,EAAIE,EAAKN,MAAMK,QAIvFC,EAAKI,SAAS,CACZR,aAAaS,OAAAC,EAAA,EAAAD,CAAKL,EAAKN,MAAME,cAAjBW,OAAA,CAA+BvB,IAC3Ca,QAAS,qCACTC,MAAOE,EAAKN,MAAMI,MAAQ,GACzB,kBAAMI,QAAQC,IAAR,UAAAI,OAAsBP,EAAKN,MAAMI,MAAjC,YAAAS,OAAiDP,EAAKN,MAAMK,UAGvEC,EAAKQ,aAAab,MAGpBa,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,6EAMpC,IAAAC,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAAA,OAAKU,MAAM,SACTZ,EAAAC,EAAAC,cAAA,4BAAoBsC,KAAKxB,MAAMI,MAA/B,oBAAuDoB,KAAKxB,MAAMK,QAEpErB,EAAAC,EAAAC,cAAA,OAAKU,MAAM,WACTZ,EAAAC,EAAAC,cAAA,UAAKsC,KAAKxB,MAAMG,UAEjBqB,KAAKxB,MAAMC,KAAK0B,IAAI,SAAAC,GAAG,OACtB5C,EAAAC,EAAAC,cAAC2C,EAAD,CACExC,YAAakC,EAAKlC,YAClBC,GAAIsC,EAAItC,GACRwC,IAAKF,EAAItC,GACTI,MAAOkC,EAAIlC,kBA/DLqC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6def632e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Tile.css\";\n\nconst Tile = props => (\n  <div className=\"tile\" onClick={() => props.handleClick(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Tile;\n","import React from 'react';\nimport './Title.css';\n\nconst Title = props => (\n  <div class=\"jumbotron text-center\">\n    <h1 class=\"display-6\">GOT React Memory Game</h1>\n    <h3>\n      Click on an image to earn points, but don't click on any more than once!\n    </h3>\n  </div>\n);\n\nexport default Title;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Tile from \"./components/Tile\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport pics from \"./pix.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.pics to the pics json array\n  state = {\n    pics: pics,\n    selectedPics: [],  // will be used for selected pics\n    message: \"\",\n    score: 0,\n    total: 0\n  };\n\n  handleClick = id => {\n    if (this.state.selectedPics.includes(id)) {\n      // game over\n      console.log(\"Game Over\")\n      this.setState({\n        selectedPics: [],\n        message: \"That image was already selected once. Start over.\",\n        score: 0,\n        total: (this.state.score > this.state.total) ? this.state.score : this.state.total,\n      })\n      // only goes through one set of 12 - needs a % test\n    } else if (this.state.score === 11) {\n      // found all\n      this.setState({\n        selectedPics: [],\n        message: \"Awesome! You've selected all images once. Keep going!!!\",\n        score: this.state.score + 1,\n        total: (this.state.score + 1 > this.state.total) ? this.state.score + 1 : this.state.total,\n      })\n    } else {\n      // add to score\n      this.setState({\n        selectedPics: [...this.state.selectedPics, id],\n        message: \"Great! That's a new image. Next...\",\n        score: this.state.score + 1\n      }, () => console.log(`Score: ${this.state.score} Total: ${this.state.total}`))\n    }\n\n    this.shuffleArray(pics)\n  };\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    };\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title />\n        <div class=\"score\">\n          <h3>Current Score: {this.state.score}  Highest Score: {this.state.total}</h3>\n        </div>\n        <div class=\"message\">\n          <h4>{this.state.message}</h4>\n        </div>\n        {this.state.pics.map(pic => (\n          <Tile\n            handleClick={this.handleClick}\n            id={pic.id}\n            key={pic.id}\n            image={pic.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}